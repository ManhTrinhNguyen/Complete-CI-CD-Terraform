plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.1.0'
}

group 'com.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 17

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.3'
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.33'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    implementation "javax.annotation:javax.annotation-api:1.3.2"
}

class ApplicationVersion {
   Integer major
   Integer minor
   Integer patch
   Boolean release

   ApplicationVersion(Integer major, Integer minor, Integer patch, Boolean release) {
      this.major = major
      this.minor = minor
      this.patch = patch
      this.release = release
   }

   private String getRelease() {
      return this.release ? '' : '-SNAPSHOT'
   }

   String getVersion() {
      return "$major.$minor.$patch" + this.getRelease()
   }
}

ext.loadVersion = { ->

   def versionPropertiesFile = file('version.properties')

   if(!versionPropertiesFile.exists()) {
      throw new Exception('No version.properties file found')
   }

   Properties versionProperties = new Properties()

   versionPropertiesFile.withInputStream { stream ->
      versionProperties.load(stream)
   }
   return new ApplicationVersion(versionProperties.major.toInteger(),
                           versionProperties.minor.toInteger(),
                           versionProperties.patch.toInteger(),
                           versionProperties.release.toBoolean())

}

version = loadVersion().getVersion()

task majorVersionUpdate(group: 'versioning', description: 'Bump to next major version') {
   doFirst {
      def versionFile = file('version.properties')
      ant.propertyfile(file: versionFile) {
         entry(key: 'major', type: 'int', operation: '+', value: 1)
         entry(key: 'minor', type: 'int', operation: '=', value: 0)
         entry(key: 'patch', type: 'int', operation: '=', value: 0)
      }
   }
}

task minorVersionUpdate(group: 'versioning', description: 'Bump to next minor version') {
   doFirst {
      def versionFile = file('version.properties')
      ant.propertyfile(file: versionFile) {
         entry(key: 'minor', type: 'int', operation: '+', value: 1)
         entry(key: 'patch', type: 'int', operation: '=', value: 0)
      }
   }
}

task patchVersionUpdate(group: 'versioning', description: 'Bump to next patch version') {
   doFirst {
      def versionFile = file('version.properties')
      ant.propertyfile(file: versionFile) {
         entry(key: 'patch', type: 'int', operation: '+', value: 1)
      }
   }
}

task releaseVersion(group: 'versioning', description: 'Make the version a release') {
   doFirst {
      def versionFile = file('version.properties')
      ant.propertyfile(file: versionFile) {
         entry(key: 'release', type: 'string', operation: '=', value: 'true')
      }
   }
}

task preReleaseVersion(group: 'versioning', description: 'Make the version a pre release') {
   doFirst {
      def versionFile = file('version.properties')
      ant.propertyfile(file: versionFile) {
         entry(key: 'release', type: 'string', operation: '=', value: 'false')
      }
   }
}